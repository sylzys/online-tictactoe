<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title></title>
</head>
<body>
	<div id="game"></div>
	<div id="infos"></div>
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
	<script type="text/javascript" src="http://d3lp1msu2r81bx.cloudfront.net/kjs/js/lib/kinetic-v4.5.1.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script>

	$(document).ready(function(){

		/* KINETIC VARS */

		var stage = new Kinetic.Stage({container: 'game', width: 640, height: 480});
		var layer = new Kinetic.Layer();
		var piecesGroup = new Kinetic.Group({x: 101, y: 21});
		var cross = new Image();
		var circle = new Image();
		var dummy = new Image();
		var chosen = cross;
		var my_id;
		/* SOCKETS */
		var socket = io.connect('http://localhost');
		socket.on('init', function (data) {
			console.log("received from socket : "+ data['pic']);
			my_id = data['id'];
			console.log(data);
			console.log ("i m " + my_id);
			switch(data['pic']) {
				case 1:
				chosen = cross;
				console.log("You're playing with Cross");
				break;
				case 2:
				chosen = circle;
				console.log("You're playing with Circle");
				break;
			}
		});

		socket.on('recv', function (data) {
			console.log("I got a private MSG ");

		});
		/* GAME VARS */

		var numPlayers = 1;

		var positions = [
		{x:0, y:0}, {x:148, y:0}, {x:296, y:0},
		{x:0, y:148}, {x:148, y:148}, {x:296, y:148},
		{x:0, y:296}, {x:148, y:296}, {x:296, y:296}
		];

		var combos = [
  [0, 1, 2],// across top row
  [3, 4, 5],// across middle row
  [6, 7, 8],// across bottom row
  [0, 3, 6],// vertical left column
  [1, 4, 7],// vertical middle column
  [2, 5, 8],// vertical right column
  [0, 4, 8],// diagonal decline
  [2, 4, 6]// diagonal incline
  ];

  // CPU PLAYER

  var cpu_wins = {
  	moves2: [],
  	moves3: []
  };

  var two_move_win = [];
  var three_move_win = [];

  //

  var crossMoves = [];
  var circleMoves = [];

  /* FUNCTION CALLS */

  loadBG();

  /* FUNCTIONS */

  function loadBG(){

  	var obj = new Image();

  	obj.onload = function() {

  		var img = new Kinetic.Image({x: 0, y: 0, image: obj, width: 640, height: 480});

  		layer.add(img);

  		layer.add( piecesGroup );

  		loadRed();
  		drawGamePieces();

  		stage.add(layer);
  	}

  	obj.src = 'images/bg.jpg';
  }

  function loadRed(){

  	cross.onload = function() {

  		var img = new Kinetic.Image({x: 0, y: 0, image: cross, width: 140, height: 140});

  		loadBlue();
  	}

  	cross.src = 'images/red.png';
  }

  function loadBlue(){

  	circle.onload = function() {

  		var img = new Kinetic.Image({x: 0, y: 0, image: circle, width: 140, height: 140});

  		drawGamePieces();

  		stage.add(layer);
  	}

  	circle.src = 'images/blue.png';
  }

  function drawGamePieces(){
  	var valid_play = false;
  	$(positions).each(function(index, value){

  		var tile = new Kinetic.Rect({
  			x: value.x,
  			y: value.y,
  			width: 140,
  			height: 140,


        // fill:"green",


        stroke: "none",
        strokeWidth: 1
    });

  		tile.setFillPatternImage( null );
  		tile.setFillPatternOffset( 0 ,0 );

  		tile.on('mouseover', function(){

        // Set mouse cursor
        document.body.style.cursor = 'pointer';

        // Set tile opacity
        this.setOpacity(0.5);

        // Set tile fill
        this.setFillPatternImage( chosen );
        this.setFillPatternOffset( 0 ,0 );
        layer.draw();
    });

  		tile.on('mouseout', function(){

        // Set mouse cursor
        document.body.style.cursor = 'default';

        // Set tile opacity
        this.setOpacity(1);

        // Set tile fill
        this.setFillPatternImage( dummy );
        this.setFillPatternOffset( 0 ,0 );
        layer.draw();
    });

  		tile.on('mousedown touchstart', function(){

        // Set mouse cursor
        document.body.style.cursor = 'default';

        // Set tile fill
        this.setFillPatternImage( chosen );
        this.setFillPatternOffset( 0 ,0 );
    });

  		tile.on('mouseup touchend', function(){
  			var self = this;
  			socket.emit('play', { id: my_id });
  			socket.on('valid_play', function (data) {
  				

  				console.log("valid_play msg: "+data['msg']);
  				if ("OK" == data['msg'])
  				{
			        // Remove mouse events
			        self.off('mouseover mouseout mousedown touchstart mouseup touchend');

			        // Set tile opacity
			        self.setOpacity(1);
			        
			        console.log("OK");
			        layer.draw();
			    }//end if OK
			        console.log('>> this.getZIndex(): ', self.getZIndex() );
			     
			});//end socket emit
      });//end touchend event
  		//if (valid_play)
  		piecesGroup.add(tile);
    });//end position.each
  }//end draw_pieces
  //
//   function checkWin(){

//   	console.log('>> crossMoves: ', crossMoves.toString());
//   	console.log('>> circleMoves: ', circleMoves.toString());

//   	var rStr = crossMoves.toString();
//   	var bStr = circleMoves.toString();

//   	$(combos).each(function( index, value ){

//   		if( rStr.indexOf(value.toString()) >= 0 ){

//         //console.log('RED >> Combo: ', index, value);
//         //console.log('RED >> rStr.indexOf(value.toString()): ' , rStr.indexOf(value.toString()) );
//         console.log('>> RED WINS!');

//     }else if( bStr.indexOf(value.toString()) >= 0 ){

//         //console.log('BLUE >> Combo: ', index, value);
//         //console.log('BLUE >> rStr.indexOf(value.toString()): ' , rStr.indexOf(value.toString()) );
//         console.log('>> BLUE WINS!');
//     }

// });
//   }

});

</script>

</body>

</html>

